// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// criando migracao =  npx prisma migrate dev NOME_MIGRACAO init
// puxando dados do db = npx prisma db pull
// atualizando o projeto com as migracoes existente npx prisma migrate deploy 
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(200)
  description String   @db.VarChar(200)
  price       Float
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @updatedAt @db.Timestamptz(3)
  Spot        Spot[]

  @@map("tb_evento")
}

model Spot {
  id        String     @id @default(uuid())
  name      String     @db.VarChar(191)
  eventId   String
  status    SpotStatus
  createdAt DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt DateTime   @updatedAt @db.Timestamptz(3)

  Ticket             Ticket? //one to one
  ReservationHistory ReservationHistory[] //many to one
  Event              Event                @relation(fields: [eventId], references: [id])

  @@map("tb_assento")
}

enum SpotStatus {
  available
  reserved
}

model Ticket {
  id         String     @id @default(uuid())
  email      String
  ticketKind TicketKind
  createdAt  DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime   @updatedAt @db.Timestamptz(3)
  spotId     String

  Spot Spot @relation(fields: [spotId], references: [id])

  @@unique([spotId]) //one to one
  @@map("tb_ticket")
}

enum TicketKind {
  full
  half
}

model ReservationHistory {
  id         String       @id @default(uuid())
  email      String
  ticketKind TicketKind
  status     TicketStatus
  createdAt  DateTime     @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime     @updatedAt @db.Timestamptz(3)
  spotId     String

  Spot Spot @relation(fields: [spotId], references: [id])

  @@map("tb_resevation_history")
}

enum TicketStatus {
  reserved
  canceled
}
